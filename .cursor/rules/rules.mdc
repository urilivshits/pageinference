---
description: Comprehensive coding standards and workflow guidelines to be applied to all interactions.
globs: 
alwaysApply: true
---
# Global Development Guidelines

**IMPORTANT**: This file is the definitive source of truth for all project rules and must never be modified or overwritten without explicit user approval.

## Code Organization & Implementation Approach

- **Imports**: Group by source (standard library, third-party, local)
- **Component Structure**: Organize code by sections (props, state, effects, handlers, render)
- **File Length**: Prefer files under 300 lines; favor composition
- **Simplicity**: Choose simple, clear solutions over complex ones
- **Avoid Duplication**: Check for existing similar code before implementing new functionality
- **File Scripts**: Avoid writing one-off scripts in files when possible
- **Cleanliness**: Keep the codebase very clean and organized
- **Indentation**: Use 2 spaces for all code files

## Implementation Strategy

- **Change Scope**: Only make changes that are requested or well understood and related to the task
- **Impact Assessment**: Always consider what other methods and areas of code might be affected by changes
- **Fix Approach**: Exhaust existing implementation options before introducing new patterns or technology
- **Tests-First Preference**: Write tests early whenever practical, but do not block development if immediate test writing is not feasible
- **Environment Awareness**: Code should account for different environments: dev, test, and prod
- **Env Files**: Never overwrite .env files without explicit permission

## File Maintenance

### Critical System Files

- The global rules file (this file), `tasks.md`, and `context.md` are critical artifacts that must be preserved and synchronized
- **Global Rules File**: This file is the single source of truth and must never be updated or replaced without explicit user approval
- **Tasks.md**: Located at `rootProjectFolder/.user/tasks.md`, tracks all user queries and implementation tasks
- **Context.md**: Located at `rootProjectFolder/.user/context.md`, documents project progress and knowledge

## Task Management & Tracking

**MANDATORY**: Every user query must be recorded in `tasks.md` using the following exact format:

```markdown
## User Query: "[Exact query text as a single line]"
- Task: [Brief task description]
  - [ ] Define test cases for [specific functionality]
    - [ ] Unit test: [test description]
    - [ ] Service test: [test description]
    - [ ] API test: [test description]
  - [ ] Implement [functionality]
    - [ ] [Subtask detail]
  - [ ] Run tests and validate implementation
    - [ ] Run unit tests for [functionality]
    - [ ] Run service tests for [functionality]
    - [ ] Run API tests for [functionality]
```

- At the start of processing a user query, add tasks with empty `[ ]` checkboxes
- At the end of processing, mark any resolved tasks/subtasks with `[x]`
- A task is considered complete when all its subtasks are marked complete
- For each user query, a section must be added to `tasks.md` that includes:
  1. The exact user query text in quotes as a single continuous string with all line breaks removed
  2. Tasks derived from that query
  3. Detailed subtasks for each task, including test creation, implementation, and test validation

## Testing Guidelines

- Develop unit, service, and API tests to validate functionality
- Embrace a tests-first mindset when possible, but allow iterative development if immediate test creation isn't practical
- Every implementation must be validated by running corresponding tests

## Project Progress Report (`context.md`)

- **Implemented Features**: Document every new functionality
- **Resolved Bugs**: Record every bug fix
- **Project Understanding**: Update `context.md` with every relevant change affecting project understanding

**MANDATORY**: Every feature implementation and bug fix must be recorded in `context.md` using the following format:

```markdown
## Implemented Features

- **[Feature Name]** Developed functionality for [purpose] that enables users to [capability].
- **[Optimization]** Enhanced [component] performance by [technique] resulting in [benefit].

## Resolved Bugs

- **[Bug ID/Description]** Fixed [issue description] in [file-name.js]
- **[Bug ID/Description]** Resolved [issue description] affecting [component/feature]
```

## Additional Notes

- For multi-file modifications, generate consistent changes across relevant files