---
description: Comprehensive coding standards and workflow guidelines to be applied to all interactions.
globs: 
alwaysApply: true
---
# Cursor AI Guidelines
<!-- Comprehensive coding standards and workflow guidelines to be applied to all interactions. -->

## Naming Conventions
- Variables: camelCase
- Functions: camelCase
- Classes: PascalCase
- Components: PascalCase
- Constants: UPPER_SNAKE_CASE
- Files: kebab-case

## Code Organization
- Imports: grouped by source (standard library, third-party, local)
- Component structure: props, state, effects, handlers, render
- Max file length: 300 lines (prefer composition over large files)
- Simplicity: Always prefer simple solutions over complex ones
- Avoid duplication: Check for existing similar code before implementing new functionality
- File scripts: Avoid writing one-off scripts in files when possible
- Cleanliness: Keep the codebase very clean and organized
- Indentation: Use two spaces for indentation in all code files

## Implementation Strategy
- Change scope: Only make changes that are requested or well understood and related to the task
- Impact assessment: Always consider what other methods and areas of code might be affected by changes
- Fix approach: Exhaust existing implementation options before introducing new patterns or technology
- Environment awareness: Code should account for different environments: dev, test, and prod
- Env file: Never overwrite .env files without explicit permission

## File Maintenance

### Critical System Files
- `projectRootFolder/.cursor/rules/rules.mdc` is the primary source of truth for all guidelines and must NEVER be updated or modified
- All guidelines in `rules.mdc` take precedence over any other documentation
- `projectRootFolder/.user/tasks.md` and `projectRootFolder/.user/context.md` are critical system artifacts
- These files must be preserved and maintained across sessions
- Maintain the integrity and format of these files at all times
- When changes are made to any file, ensure proper synchronization between files
- Any modifications to the structure or format of these files must be explicitly approved by the user

## Task Management and Tracking

### Task Tracking Process
1. Convert high-level user queries to detailed step-by-step tasks and subtasks
2. Record all user queries and corresponding tasks in `projectRootFolder/.user/tasks.md`
3. Include checkboxes for each subtask (default unchecked)
4. Review tasks at the end of every response and mark completed subtasks
5. Reopen resolved tasks if bugs are reported later
6. Check for unmarked tasks at the beginning of every response
7. **MANDATORY:** Use the tasks and subtasks in `tasks.md` as the EXACT step-by-step execution plan
8. **MANDATORY:** Follow tasks strictly in the order they are listed in `tasks.md`
9. **MANDATORY:** Do not deviate from the execution plan unless explicitly instructed by the user
10. **MANDATORY:** Refer back to `tasks.md` throughout the implementation process
11. **MANDATORY:** If implementation reveals the need for plan modification, first update `tasks.md` with the revised approach before proceeding

### Task Format and Structure
- **MANDATORY:** `tasks.md` serves as the single source of truth for all user interactions and task progress
- **MANDATORY:** Update `tasks.md` TWICE during each interaction:
  1. At the BEGINNING: Add the user query and new tasks
  2. At the END: Mark completed subtasks and review progress
- **MANDATORY:** All tasks must include detailed subtasks with checkboxes
- **MANDATORY:** All incomplete subtasks must be marked with [ ]
- **MANDATORY:** All completed subtasks must be marked with [x] at the end of the response
- **MANDATORY:** Only subtasks should have checkboxes (not main tasks)
- **MANDATORY:** A task is considered complete when all its subtasks are marked complete
- **MANDATORY:** For each user query, a section must be added to `tasks.md` that includes:
  1. The exact user query text in quotes as a single continuous string with all line breaks removed
  2. Tasks derived from that query
  3. Detailed subtasks for each task
- **MANDATORY:** When recording user queries that contain multiple lines, convert them to a single line by removing all line breaks
- **TASK FORMAT:** Use the following format:
  ```
  ## User Query: "[Exact query text as a single string with all line breaks removed]"
  - Task: [Brief task description]
    - [ ] [Detailed subtask]
    - [ ] [Detailed subtask]
  - Task: [Brief task description]
    - [ ] [Detailed subtask]
    - [ ] [Detailed subtask]
  ```
- Organize tasks chronologically by user query
- Categorize tasks logically with clear headings when appropriate
- Treat EVERY user query, no matter how small, as a task that requires tracking

## Project Progress Report

### Purpose and Structure
- The Project Progress Report (`context.md`) tracks the project's evolution
- Use this report to understand the project's architectural approaches, features, and resolved issues
- **MANDATORY:** Update the Project Progress Report whenever:
  1. New architectural decisions are made
  2. New features are implemented
  3. Any bug fixes are implemented (all bug fixes must be recorded, regardless of size or significance)
  4. Any changes affect project understanding
- Organize the Progress Report in exactly three sections:
  1. Technical approaches and architectural decisions
  2. Implemented features
  3. Resolved bugs
- For each entry, include:
  - A descriptive identifier or short title
  - A clear, concise description
  - References to relevant code areas or files
- **MANDATORY:** Summarize any updates to the Progress Report at the end of your response
- Never remove information from the Progress Report unless explicitly instructed
- Prioritize solutions that align with previously documented technical approaches

### Example Format for Project Progress Report
```
## Architectural Decisions

- **[Architecture Pattern]** Implemented [pattern name] for [purpose] to enhance [benefit].
- **[Framework Selection]** Adopted [Framework Name] for [component] to improve [benefit].

## Implemented Features

- **[Feature Name]** Developed functionality for [purpose] that enables users to [capability].
- **[Optimization]** Enhanced [component] performance by [technique] resulting in [benefit].

## Resolved Bugs

- **[Bug ID/Description]** Fixed [issue description] in [file-name.js]
- **[Bug ID/Description]** Resolved [issue description] affecting [component/feature]
```

## Token Limit Handling
- Monitor token usage throughout long responses
- If approaching token limits during a complex task:
  1. Save current progress in relevant artifact files (`context.md` and `tasks.md`)
  2. Summarize what has been accomplished so far
  3. Outline what remains to be done
  4. End with a clear question about continuing
- When continuing from a previous token-limited response:
  1. Briefly summarize what was accomplished
  2. Continue where the previous response left off
  3. Follow the same token limit protocol if needed again
- Prioritize completing critical tasks before reaching token limits